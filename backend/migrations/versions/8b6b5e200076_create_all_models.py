"""Create all models

Revision ID: 8b6b5e200076
Revises: 
Create Date: 2025-04-24 10:42:01.686176

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8b6b5e200076'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('region',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('region_name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('login', sa.String(), nullable=False),
    sa.Column('hash_password', sa.String(), nullable=False),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('role', sa.Enum('FEDERATION', 'REGIONAL_REP', 'ATHLETE', name='userrole', native_enum=False), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('competitions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('OPEN', 'REGIONAL', 'FEDERAL', name='competitionstype', native_enum=False), nullable=False),
    sa.Column('discipline', sa.Enum('PRODUCT', 'SECURITY', 'ALGORITHMIC', 'ROBOTICS', 'UAV', name='competitionsdiscipline', native_enum=False), nullable=False),
    sa.Column('date_to_create', sa.Date(), nullable=False),
    sa.Column('date_to_start', sa.Date(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('max_count_users', sa.Integer(), nullable=True),
    sa.Column('min_age_users', sa.Integer(), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('is_published', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_region',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('region_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['region_id'], ['region.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('limitation_region',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('competitions_id', sa.Integer(), nullable=False),
    sa.Column('region_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['competitions_id'], ['competitions.id'], ),
    sa.ForeignKeyConstraint(['region_id'], ['region.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teams',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('competitions_id', sa.Integer(), nullable=False),
    sa.Column('captain_id', sa.Integer(), nullable=False),
    sa.Column('pepresentative_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('FILLED', 'NEED_PLAYERS', name='teamstatus', native_enum=False), nullable=False),
    sa.ForeignKeyConstraint(['captain_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['competitions_id'], ['competitions.id'], ),
    sa.ForeignKeyConstraint(['pepresentative_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team_request',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('competitions_id', sa.Integer(), nullable=False),
    sa.Column('teams_id', sa.Integer(), nullable=False),
    sa.Column('place', sa.Integer(), nullable=True),
    sa.Column('points', sa.Integer(), nullable=True),
    sa.Column('сomment', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('ON_MODERATION', 'REJECTED', 'FORMING', 'APPROVED', 'COMPLETED', name='teamrequeststatus', native_enum=False), nullable=False),
    sa.ForeignKeyConstraint(['competitions_id'], ['competitions.id'], ),
    sa.ForeignKeyConstraint(['teams_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users_in_teams',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('comment', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('INVITED', 'WAITING_LEADER', 'MEMBER', 'DECLINED', name='usersinteamsstatus', native_enum=False), nullable=False),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users_in_teams')
    op.drop_table('team_request')
    op.drop_table('teams')
    op.drop_table('limitation_region')
    op.drop_table('user_region')
    op.drop_table('competitions')
    op.drop_table('users')
    op.drop_table('region')
    # ### end Alembic commands ###
